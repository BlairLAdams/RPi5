Raspberry Pi Bare-Metal Stack â€“ Setup Walkthrough (Confirmed Steps)

This guide walks through how to configure a Raspberry Pi running Pi OS Lite to use GitHub and SSH properly with a working setup. All steps below have been tested and verified.

---

Part 1: Run from Your Laptop (Windows)

1. SSH Setup for VS Code
   - Use the PowerShell script: setupPiSSH.ps1
   - This will:
     - Prompt for Pi IP, username, and SSH key path
     - Write a clean ~/.ssh/config
     - Push your key to the Pi and authorize it
     - Allow passwordless SSH and VS Code Remote-SSH login

2. Test SSH Access
   - Run: ssh pi
   - This should connect without prompting for a password.

---

Intermediate Setup: GitHub Deploy Key

Before cloning the repo from the Pi, a deploy key must be registered on GitHub.

1. On the Pi:
   - Run: chmod 600 ~/.ssh/id_ed25519
   - Run: chmod 644 ~/.ssh/id_ed25519.pub

2. On GitHub:
   - Visit: https://github.com/blairladams/RPi5/settings/keys
   - Add the contents of ~/.ssh/id_ed25519.pub
   - Enable write access

3. Test Access
   - Run: ssh -T git@github.com
   - Expected result: 
     "Hi blairladams! You've successfully authenticated..."

---

Part 2: Run on the Pi

1. Pull GitHub Repo to ~/scr
   - Run:
     cd ~/scr
     git init
     git remote add origin git@github.com:blairladams/RPi5.git
     git fetch origin
     git checkout -B main origin/main
   - If you get an error like:
     "The following untracked working tree files would be overwritten by checkout: .gitignore"
     - Fix it with: rm .gitignore
     - Then: git checkout -B main origin/main

2. Restore the Preferred .gitignore
   - Overwrite the default .gitignore with:
     # Minimal ignore â€“ track everything in ~/scr except junk
     .DS_Store
     Thumbs.db
     *.swp
     *.swo
     *.bak
     *.tmp
     *~
     __pycache__/
     *.pyc
     *.log
     *.pid
   - Then:
     git add .gitignore
     git commit -m "ðŸ§¹ Simplify .gitignore: track everything in ~/scr"
     git push

---

Confirmed Working Scripts

| Script                    | Purpose                                               | Run From |
|---------------------------|--------------------------------------------------------|----------|
| setupPiSSH.ps1            | Set up SSH + key-based access for VS Code             | Laptop   |
| setupGit.sh               | Install Git and pull repo into ~/scr                  | Pi       |
| verifyGitSSHAccess.sh     | Validates deploy key access to GitHub via SSH         | Pi       |
| pullFromGit.sh            | Simple Git pull into ~/scr from GitHub                | Pi       |

Notes

- All scripts live in ~/scr and are tracked in Git
- Scripts follow PiosHarden.sh style: headers, checklist icons, clean formatting
- This guide is designed to be fully automatable in a future full-stack script


### Old Version
- Flash Pi OS Lite to MicroSD
- Add a blank ssh file
- BasicPiOSTools.sh 
- PiOSHarden.sh
- gitBootStrap.sh
- Setup .gitignore?
- Setup vs code token/pass phrase
- mkdir ~/scr
- Pull git/RPi5 into ~/scr
- Install Postgres
- grafanaDemoInstall.sh
- Add prometheus data source in grafana
- Install Metabase
- firewallConfig.sh
- Water Quality Sample Data 
- IIOT Sample Data

# README folder structure
scr/
â”œâ”€â”€ 00_os/                  # OS-level hardening, SSH setup, Wi-Fi disabling, etc.
â”‚   â”œâ”€â”€ setupSSH.sh
â”‚   â”œâ”€â”€ disableWifi.sh
â”‚   â””â”€â”€ systemHardening.sh
â”‚
â”œâ”€â”€ 01_git/                 # Git and bootstrapping
â”‚   â”œâ”€â”€ gitBootstrap.sh
â”‚   â””â”€â”€ gitBackup.sh
â”‚
â”œâ”€â”€ 02_python/              # Python environment setup and management
â”‚   â”œâ”€â”€ setupGlobalStack.sh
â”‚   â”œâ”€â”€ installPythonDeps.sh
â”‚   â””â”€â”€ cleanVirtualEnv.sh
â”‚
â”œâ”€â”€ 03_postgres/            # PostgreSQL schema, ingest, backups
â”‚   â”œâ”€â”€ createWaterAnalyticsDB.sh
â”‚   â”œâ”€â”€ showWaterAnalyticsStructure.sh
â”‚   â”œâ”€â”€ ingest_water_quality.py
â”‚   â”œâ”€â”€ ingest_water_consumption.py
â”‚   â””â”€â”€ backupDB.sh
â”‚
â”œâ”€â”€ 04_dbt/                 # dbt project and model structure
â”‚   â”œâ”€â”€ init_dbt_project.sh
â”‚   â””â”€â”€ models/
â”‚       â”œâ”€â”€ bronze/
â”‚       â”œâ”€â”€ silver/
â”‚       â””â”€â”€ gold/
â”‚
â”œâ”€â”€ 05_dagster/             # Dagster project scaffold + assets
â”‚   â”œâ”€â”€ scaffold_dagster_project.sh
â”‚   â””â”€â”€ assets/
â”‚       â”œâ”€â”€ bronze_ingest.py
â”‚       â””â”€â”€ bronze_to_silver.py
â”‚
â”œâ”€â”€ 06_grafana/             # Grafana config and provisioning
â”‚   â”œâ”€â”€ installGrafana.sh
â”‚   â”œâ”€â”€ grafana.ini
â”‚   â”œâ”€â”€ dashboards/
â”‚   â””â”€â”€ grafanaBackup.sh
â”‚
â”œâ”€â”€ 07_prometheus/          # Prometheus and Node Exporter setup
â”‚   â”œâ”€â”€ installPrometheus.sh
â”‚   â”œâ”€â”€ prometheus.yml
â”‚   â””â”€â”€ installNodeExporter.sh
â”‚
â”œâ”€â”€ 08_metabase/            # Metabase config and launch
â”‚   â””â”€â”€ setupMetabase.sh
â”‚
â”œâ”€â”€ shared/                 # Shared assets like .env, templates, data
â”‚   â”œâ”€â”€ env.template
â”‚   â””â”€â”€ datasets/
â”‚       â”œâ”€â”€ water_quality.csv
â”‚       â””â”€â”€ water_consumption.csv
â”‚
â”œâ”€â”€ README.md
â””â”€â”€ .gitignore