#!/bin/bash

# ==============================================================================
# SCRIPT: grafanaDemoInstall
# PURPOSE: Install Grafana, Prometheus, and node_exporter with a working demo
#          Includes Node Exporter Full dashboard and real metrics from localhost
# USAGE:
#   Run ON THE PI after flashing Pi OS Lite and restoring ~/scr
# RESULT:
#   Visit http://<your-pi-ip>:3000
#   Login: admin / admin
#   Dashboard: "Node Exporter Full" ‚Äî live metrics from the Pi
# ==============================================================================

set -e

# ----------------------------------------------------------------------------
# Install prerequisites
# ----------------------------------------------------------------------------
echo "üîß Installing system packages..."
sudo apt update
sudo apt install -y wget curl software-properties-common apt-transport-https jq libcap2-bin

# ----------------------------------------------------------------------------
# Install Prometheus + node_exporter
# ----------------------------------------------------------------------------
echo "üì¶ Installing Prometheus and node_exporter..."

sudo useradd --no-create-home --shell /usr/sbin/nologin prometheus || true
sudo mkdir -p /etc/prometheus /var/lib/prometheus

PROM_VER="2.52.0"
NODE_EXPORTER_VER="1.8.1"

wget https://github.com/prometheus/prometheus/releases/download/v$PROM_VER/prometheus-$PROM_VER.linux-armv7.tar.gz

tar xvf prometheus-$PROM_VER.linux-armv7.tar.gz
cd prometheus-$PROM_VER.linux-armv7

echo "üîö Stopping prometheus if running..."
sudo systemctl stop prometheus 2>/dev/null || true

sudo cp prometheus promtool /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool
sudo setcap cap_net_bind_service=+ep /usr/local/bin/prometheus

sudo cp -r consoles console_libraries /etc/prometheus/
cd ..
rm -rf prometheus-$PROM_VER.linux-armv7*

wget https://github.com/prometheus/node_exporter/releases/download/v$NODE_EXPORTER_VER/node_exporter-$NODE_EXPORTER_VER.linux-armv7.tar.gz

tar xvf node_exporter-$NODE_EXPORTER_VER.linux-armv7.tar.gz
cd node_exporter-$NODE_EXPORTER_VER.linux-armv7

echo "üîö Stopping node_exporter if running..."
sudo systemctl stop node_exporter 2>/dev/null || true

sudo cp node_exporter /usr/local/bin/
sudo chown prometheus:prometheus /usr/local/bin/node_exporter
cd ..
rm -rf node_exporter-$NODE_EXPORTER_VER.linux-armv7*

# Fix permissions for Prometheus
sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus

# ----------------------------------------------------------------------------
# Configure Prometheus to scrape node_exporter on localhost
# ----------------------------------------------------------------------------
echo "üõ† Creating Prometheus config..."
sudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']
EOF

# ----------------------------------------------------------------------------
# Create systemd services
# ----------------------------------------------------------------------------
echo "üìù Setting up systemd services..."

sudo tee /etc/systemd/system/prometheus.service > /dev/null <<EOF
[Unit]
Description=Prometheus Monitoring
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/var/lib/prometheus/ \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries
Restart=always

[Install]
WantedBy=multi-user.target
EOF

sudo tee /etc/systemd/system/node_exporter.service > /dev/null <<EOF
[Unit]
Description=Prometheus Node Exporter
After=network.target

[Service]
User=prometheus
ExecStart=/usr/local/bin/node_exporter
Restart=always

[Install]
WantedBy=default.target
EOF

# ----------------------------------------------------------------------------
# Enable and start Prometheus + node_exporter
# ----------------------------------------------------------------------------
echo "üöÄ Starting Prometheus and node_exporter..."
sudo systemctl daemon-reexec
sudo systemctl enable prometheus node_exporter
sudo systemctl restart prometheus node_exporter

# Check Prometheus status
if ! sudo systemctl is-active --quiet prometheus; then
  echo "‚ùå Prometheus failed to start. Check logs below:"
  sudo journalctl -u prometheus --no-pager --since "5 minutes ago"
  exit 1
fi

# Test localhost:9090
if ! curl -s http://localhost:9090/-/healthy | grep -q "Prometheus is Healthy"; then
  echo "‚ö†Ô∏è Prometheus is not responding at http://localhost:9090"
  exit 1
fi

# ----------------------------------------------------------------------------
# Remove any previous Grafana install and do clean install
# ----------------------------------------------------------------------------
echo "ü™ú Removing any existing Grafana install..."
sudo systemctl stop grafana-server 2>/dev/null || true
sudo systemctl disable grafana-server 2>/dev/null || true
sudo apt remove --purge -y grafana 2>/dev/null || true
sudo apt autoremove -y
sudo rm -rf /etc/grafana /var/lib/grafana /usr/share/grafana
sudo rm -f /etc/systemd/system/grafana-server.service

# ----------------------------------------------------------------------------
# Install Grafana
# ----------------------------------------------------------------------------
echo "üì¶ Installing Grafana..."
sudo mkdir -p /etc/apt/keyrings
wget -q -O - https://apt.grafana.com/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/grafana.gpg

echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" \
  | sudo tee /etc/apt/sources.list.d/grafana.list

sudo apt update
sudo apt install -y grafana

# ----------------------------------------------------------------------------
# Provision Prometheus datasource
# ----------------------------------------------------------------------------
echo "üì° Provisioning Prometheus datasource..."
sudo mkdir -p /etc/grafana/provisioning/datasources
sudo tee /etc/grafana/provisioning/datasources/prometheus.yaml > /dev/null <<EOF
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://localhost:9090
    isDefault: true
EOF

# ----------------------------------------------------------------------------
# Enable and start Grafana
# ----------------------------------------------------------------------------
echo "üöÄ Starting Grafana..."
sudo systemctl enable grafana-server
sudo systemctl start grafana-server

echo "‚è≥ Waiting for Grafana to start..."
sleep 15

# ----------------------------------------------------------------------------
# Install Node Exporter Full dashboard with validation
# ----------------------------------------------------------------------------
echo "üìä Installing Node Exporter Full dashboard..."

DASHBOARD_DIR=~/scr/grafana_dashboards
mkdir -p "$DASHBOARD_DIR"

DASHBOARD_URL="https://grafana.com/api/dashboards/1860/revisions/32/download"
DASHBOARD_JSON="$DASHBOARD_DIR/node_exporter_full.json"

wget -qO "$DASHBOARD_JSON" "$DASHBOARD_URL"

# Use jq to validate and extract valid dashboard payload
if jq -e '.dashboard' "$DASHBOARD_JSON" > /dev/null; then
  DASH_PAYLOAD=$(jq '.dashboard' "$DASHBOARD_JSON")
else
  DASH_PAYLOAD=$(cat "$DASHBOARD_JSON")
fi

curl -s -X POST http://localhost:3000/api/dashboards/db \
  -H "Content-Type: application/json" \
  -u admin:admin \
  -d @- <<EOF
{
  "dashboard": $DASH_PAYLOAD,
  "overwrite": true,
  "folderId": 0,
  "message": "Imported by grafanaDemoInstall"
}
EOF

echo "‚úÖ Grafana demo stack is live!"
echo "üîç Open in browser: http://<your-pi-ip>:3000"
echo "üîê Login: admin / admin"
echo "üìä Dashboard: 'Node Exporter Full' (with real-time Pi metrics)"